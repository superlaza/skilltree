// Generated by CoffeeScript 1.10.0
(function() {
  var Router, app, cola, db, express, falcorExpress, fs, graphData, majorData, neo4j, pw, ref, server, user;

  express = require('express');

  falcorExpress = require('falcor-express');

  Router = require('falcor-router');

  cola = require('webcola');

  graphData = require('../data/majorMap.json');

  graphData = require('../data/colatest.json');

  graphData = require('../data/courseAdjList.json');

  majorData = require('../data/majors/json/anthropology.json');

  fs = require('fs');

  ref = JSON.parse(fs.readFileSync('./config.cfg').toString()), user = ref.user, pw = ref.pw;

  app = express();

  neo4j = require('neo4j');

  db = new neo4j.GraphDatabase("http://" + user + ":" + pw + "@db:7474");

  app.use('/model.json', function(req, res) {
    var callback, getCourses, getPrereqs;
    callback = function(err, results) {};
    getCourses = new Promise(function(resolve, reject) {
      return db.cypher({
        query: 'MATCH (course:Course) RETURN course',
        params: {}
      }, (function(_this) {
        return function(err, results) {
          var result;
          if (err) {
            throw err;
          }
          result = results[0];
          if (!result) {
            return console.log('No results.');
          } else {
            results = results.map(function(res) {
              return res.course.properties;
            });
            return resolve(results);
          }
        };
      })(this));
    });
    getPrereqs = new Promise(function(resolve, reject) {
      return db.cypher({
        query: 'MATCH p=(source)-[r:REQUIRES]->(target) RETURN source.code as source, target.code as target',
        params: {}
      }, (function(_this) {
        return function(err, results) {
          var result;
          if (err) {
            throw err;
          }
          result = results[0];
          if (!result) {
            return console.log('No results.');
          } else {
            console.log(results);
            return resolve(results);
          }
        };
      })(this));
    });
    return Promise.all([getCourses, getPrereqs]).then(function(data) {
      return res.end(JSON.stringify({
        'nodes': data[0],
        'links': data[1]
      }));
    });
  });

  app.use(express["static"]('static'));

  app.use(express["static"]('data'));

  server = app.listen(process.env.PORT || 3000, function() {
    var host, port;
    host = server.address().address;
    port = server.address().port;
    console.log('Example app listening at http://%s:%s', host, port);
  });

}).call(this);
